local Rotations = WarGod.Rotation
local Class = WarGod.Class
local groups = WarGod.Unit.groups
local player = WarGod.Unit:GetPlayer()
local talent = player.trait
local buff = player.buff
local azerite = player.azerite
local variable = player.variable
local eclipse = player.eclipse
local buff_ca_inc = player.buff_ca_inc

local WarGodControl = WarGod.Control

local UnitInRaid = UnitInRaid
local InCombatLockdown = InCombatLockdown

local GetShapeshiftForm = GetShapeshiftForm

local upairs = upairs

---------TEMP-------------
local WGBM = WarGod.BossMods
local WarGodUnit = WarGod.Unit
--local Delegates = Rotations.Delegates
local WarGodCore = WarGod.Control

local WarGodSpells = WarGod.Rotation.rotationFrames["Balance"]
--------------------------



local GetNumGroupMembers = GetNumGroupMembers


setfenv(1, Rotations)

function Delegates:AmpNatureDamage(spell, unit)
end

function Delegates:AmpArcaneDamage(spell, unit)
end

function Delegates:AmpNatureOrArcaneDamage(spell, unit)
    return Delegates:AmpNatureDamage(spell, unit) or Delegates:AmpArcaneDamage(spell, unit)
end

local baseScore = 6000

do
    local function Burst()
        if not WarGodControl:AllowCDs() then
            return true
        elseif not Delegates:DamageCDWrapper("Starsurge", WarGodUnit:GetTarget(), {4, 120}) then
            return true
        elseif buff.balance_of_all_things:Stacks() > 0 then
            return WarGodSpells["Convoke the Spirits"]:CDRemaining() > 1.5
        else
            return true
        end
    end

    AddSpellFunction("Balance","Starsurge",baseScore + 800,{
        func = function(self)
            --if Burst() then
            return eclipse:In_Any()
            --end
        end,
        units = groups.targetable,
        label = "Starsurge Burst",
        andDelegates = {Delegates.IsSpellInRange, Delegates.BurstUnitWrapper},
    })

    if 1==1 then return end
    AddSpellFunction("Balance","Force of Nature",baseScore + 900,{
        func = function(self) return true
        end,
        units = groups.cursor,
        label = "FoN",
        --andDelegates = {Delegates.UnitIsBoss},
        IsUsable = function(self) return talent.force_of_nature.enabled and WarGodControl:AllowClickies() and Delegates:DamageCDWrapper(self.spell, WarGodUnit:GetTarget(), {10, 60}) and player.combat and WarGodUnit.active_enemies > 0 and (buff.moonkin_form:Stacks() > 0 or GetShapeshiftForm() == 0) end,
        helpharm = "harm",
        maxRange = 45,

    })

    --[[AddSpellFunction("Balance","Starsurge",baseScore + 900,{
        func = function(self) return (variable.az_ss <= 0 or (buff.celestial_alignment.down and buff.incarnation_chosen_of_elune.down) or player.prev_gcd ~= self.spell) and player:Lunar_Power_Deficit() < 10 end,
        units = groups.targetable,
        label = "Explosive Starsurge",
        andDelegates = {Delegates.IsSpellInRange, Delegates.IsExplosive, Delegates.UnitOverXPercentHealth},
        args = {percent = 0.8},
    })


    AddSpellFunction("Balance","Starfire",baseScore + 800,{
        func = function(self) return talent.warrior_of_elune.enabled and buff.warrior_of_elune:Stacks() > 0 and player:Lunar_Power_Deficit() > 20 end,
        units = groups.targetable,
        label = "Explosive LS",
        andDelegates = {Delegates.IsSpellInRange, Delegates.IsExplosive},
    })]]

    AddSpellFunction("Balance","Starsurge",baseScore + 800,{
        func = function(self)
            --if Burst() then
                return (eclipse:SolarRemains() > 0 or eclipse:LunarRemains() > 0)
            --end
        end,
        units = groups.targetable,
        label = "Starsurge Burst",
        andDelegates = {Delegates.IsSpellInRange, Delegates.BurstUnitWrapper},
    })

    AddSpellFunction("Balance","Moonfire",baseScore + 600,{
        func = function(self) if Burst() then return talent.twin_moons.enabled and player:Lunar_Power_Deficit() > 10 end end,
        units = groups.targetable,
        label = "Explosive Moonfire",
        andDelegates = {Delegates.IsSpellInRange, Delegates.IsExplosive},
    })

    AddSpellFunction("Balance","Sunfire",baseScore + 500,{
        func = function(self)
            if Burst() then
                return player:Lunar_Power_Deficit() > 10 and eclipse:In_Any()
            end
        end,
        units = groups.targetable,
        label = "Explosive Sunfire 2",
        andDelegates = {Delegates.IsSpellInRange, Delegates.IsExplosive},
    })

    AddSpellFunction("Balance","Moonfire",baseScore + 400,{
        func = function(self)
            if Burst() then
                return player:Lunar_Power_Deficit() > 10-- and (WarGodUnit.active_enemies < 4 or buff.eclipse_solar.up)
            end
        end,
        units = groups.targetable,
        label = "Explosive Moonfire 2",
        andDelegates = {Delegates.IsSpellInRange, Delegates.IsExplosive},
    })

    AddSpellFunction("Balance","Sunfire",baseScore + 300,{
        func = function(self)
            if Burst() then
                return player:Lunar_Power_Deficit() > 10 and (player:Lunar_Power() >= 48 or WarGodUnit.active_enemies == 1)
            end
        end,
        units = groups.targetable,
        label = "Sunfire (Rush)",
        ["andDelegates"] = {Delegates.IsSpellInRange, Delegates.DotQuickWrapper, Delegates.DoT_Missing},
        ["scorer"] = ScoreByInvertedDebuffTimeRemaining,
        --args = {--[[aura = "sunfire", ]]threshold = 1.5, ttd = 5.4},
    })

    AddSpellFunction("Balance","Moonfire",baseScore + 200,{
        func = function(self)
            if player:Lunar_Power_Deficit() > 10 and (player:Lunar_Power() >= 48 or WarGodUnit.active_enemies == 1) then
                return Burst() and (WarGodUnit.active_enemies < 4 or buff.eclipse_solar.up and buff.starfall.up)
            end
        end,
        units = groups.targetable,
        label = "Moonfire (Rush)",
        ["andDelegates"] = {Delegates.IsSpellInRange, Delegates.DotQuickWrapper, Delegates.DoT_Missing},
        ["scorer"] = ScoreByInvertedDebuffTimeRemaining,
        --args = {--[[aura = "sunfire", ]]threshold = 1.5, ttd = 5.4},
    })

    --[[AddSpellFunction("Balance","Stellar Flare",baseScore + 100,{
        func = function(self) return
            Burst()
        end,
        units = groups.targetable,
        label = "Stellar Flare Refresh",
        ["andDelegates"] = {Delegates.IsSpellInRange, Delegates.DotQuickWrapper, Delegates.DoT_Pandemic, Delegates.NotCastingThisAtTargetAlready, Delegates.NotDotBlacklisted},
        ["scorer"] = ScoreByInvertedDebuffTimeRemaining,
        args = {threshold = 6, ttd = 12},
    })]]


end